/// <reference types="node" />
/// <reference types="node" />
/// <reference types="node" />
import type { CommonTransportOptions } from "@bufbuild/connect/protocol";
import type { NodeHttpClientOptions } from "./node-universal-client.js";
/**
 * Options that are common to all client transports for Node.js.
 */
type CommonNodeTransportOptions = NodeHttpClientOptions & Partial<Omit<CommonTransportOptions, "baseUrl">> & Pick<CommonTransportOptions, "baseUrl">;
/**
 * Asserts that the options are within sane limits, and returns default values
 * where no value is provided.
 *
 * @private Internal code, does not follow semantic versioning.
 */
export declare function validateNodeTransportOptions(options: CommonNodeTransportOptions): {
    readMaxBytes: number;
    writeMaxBytes: number;
    compressMinBytes: number;
    httpClient: import("@bufbuild/connect/protocol").UniversalClientFn;
    useBinaryFormat: boolean;
    interceptors: import("@bufbuild/connect").Interceptor[];
    sendCompression: import("@bufbuild/connect/protocol").Compression | null;
    acceptCompression: import("@bufbuild/connect/protocol").Compression[];
    httpVersion: "1.1";
    nodeOptions?: Omit<import("http").RequestOptions, "signal"> | Omit<import("https").RequestOptions, "signal"> | undefined;
    jsonOptions?: Partial<import("@bufbuild/protobuf").JsonReadOptions & import("@bufbuild/protobuf").JsonWriteOptions> | undefined;
    binaryOptions?: Partial<import("@bufbuild/protobuf").BinaryReadOptions & import("@bufbuild/protobuf").BinaryWriteOptions> | undefined;
    useHttpGet?: boolean | undefined;
    baseUrl: string;
} | {
    readMaxBytes: number;
    writeMaxBytes: number;
    compressMinBytes: number;
    httpClient: import("@bufbuild/connect/protocol").UniversalClientFn;
    useBinaryFormat: boolean;
    interceptors: import("@bufbuild/connect").Interceptor[];
    sendCompression: import("@bufbuild/connect/protocol").Compression | null;
    acceptCompression: import("@bufbuild/connect/protocol").Compression[];
    httpVersion: "2";
    baseUrl: string;
    nodeOptions?: import("http2").ClientSessionOptions | import("http2").SecureClientSessionOptions | undefined;
    keepSessionAlive?: boolean | undefined;
    jsonOptions?: Partial<import("@bufbuild/protobuf").JsonReadOptions & import("@bufbuild/protobuf").JsonWriteOptions> | undefined;
    binaryOptions?: Partial<import("@bufbuild/protobuf").BinaryReadOptions & import("@bufbuild/protobuf").BinaryWriteOptions> | undefined;
    useHttpGet?: boolean | undefined;
};
export {};
