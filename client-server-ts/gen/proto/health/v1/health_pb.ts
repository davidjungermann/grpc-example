// @generated by protoc-gen-es v1.2.1 with parameter "target=ts"
// @generated from file proto/health/v1/health.proto (package proto.health.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message proto.health.v1.CheckHealthRequest
 */
export class CheckHealthRequest extends Message<CheckHealthRequest> {
  constructor(data?: PartialMessage<CheckHealthRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "proto.health.v1.CheckHealthRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CheckHealthRequest {
    return new CheckHealthRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CheckHealthRequest {
    return new CheckHealthRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CheckHealthRequest {
    return new CheckHealthRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CheckHealthRequest | PlainMessage<CheckHealthRequest> | undefined, b: CheckHealthRequest | PlainMessage<CheckHealthRequest> | undefined): boolean {
    return proto3.util.equals(CheckHealthRequest, a, b);
  }
}

/**
 * @generated from message proto.health.v1.CheckHealthResponse
 */
export class CheckHealthResponse extends Message<CheckHealthResponse> {
  /**
   * @generated from field: string status = 1;
   */
  status = "";

  constructor(data?: PartialMessage<CheckHealthResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "proto.health.v1.CheckHealthResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CheckHealthResponse {
    return new CheckHealthResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CheckHealthResponse {
    return new CheckHealthResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CheckHealthResponse {
    return new CheckHealthResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CheckHealthResponse | PlainMessage<CheckHealthResponse> | undefined, b: CheckHealthResponse | PlainMessage<CheckHealthResponse> | undefined): boolean {
    return proto3.util.equals(CheckHealthResponse, a, b);
  }
}

