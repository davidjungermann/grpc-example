// Copyright 2021-2023 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
import { compressionBrotli, compressionGzip } from "./compression.js";
import { createNodeHttpClient } from "./node-universal-client.js";
import { validateReadWriteMaxBytes } from "@bufbuild/connect/protocol";
/**
 * Asserts that the options are within sane limits, and returns default values
 * where no value is provided.
 *
 * @private Internal code, does not follow semantic versioning.
 */
export function validateNodeTransportOptions(options) {
    var _a, _b, _c, _d, _e;
    return Object.assign(Object.assign(Object.assign({}, options), { httpClient: (_a = options.httpClient) !== null && _a !== void 0 ? _a : createNodeHttpClient(options), useBinaryFormat: (_b = options.useBinaryFormat) !== null && _b !== void 0 ? _b : true, interceptors: (_c = options.interceptors) !== null && _c !== void 0 ? _c : [], sendCompression: (_d = options.sendCompression) !== null && _d !== void 0 ? _d : null, acceptCompression: (_e = options.acceptCompression) !== null && _e !== void 0 ? _e : [
            compressionGzip,
            compressionBrotli,
        ] }), validateReadWriteMaxBytes(options.readMaxBytes, options.writeMaxBytes, options.compressMinBytes));
}
